{"version":3,"sources":["logos/cfuv.png","Map.jsx","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","PLACES","geometry","properties","iconContent","iconCaption","hintContent","balloonContentHeader","balloonContentBody","balloonContentFooter","cfu_logo","Map","defaultState","center","zoom","options","fullscreenZIndex","exitFullscreenByEsc","visible","instanceRef","ref","enterFullscreen","map","modules","App","useState","show","setShow","Fade","in","timeout","enter","exit","unmountOnExit","Paper","component","Box","position","display","alignItems","justifyContent","width","height","zIndex","style","backgroundColor","Button","size","onClick","prev","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0EAAAA,EAAOC,QAAU,IAA0B,kC,4KCIrCC,EAAS,CAAC,CACdC,SAAU,CAAC,MAAO,MAClBC,WAAY,CACVC,YAAa,IACbC,YAAa,qEACbC,YAAa,OACbC,qBAAsB,SACtBC,mBAAoB,OACpBC,qBAAsB,WAEvB,CACDP,SAAU,CAAC,UAAW,WACtBC,WAAY,CACVC,YAAY,YAAD,O,OAAcM,EAAd,2BACXL,YAAa,qBACbC,YAAa,2SACbC,qBAAsB,2SACtBC,mBAAmB,s2DAInBC,qBAAsB,6HA8BXE,EA1BH,kBACV,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEC,aAAc,CACZC,OAAQ,CAAC,MAAO,MAChBC,KAAM,IAERC,QAAS,CAAEC,iBAAkB,EAAGC,qBAAqB,IAErD,kBAAC,IAAD,MACA,kBAAC,IAAD,MACA,kBAAC,IAAD,MACA,kBAAC,IAAD,CACEF,QAAS,CAAEG,SAAS,GACpBC,YAAa,SAAAC,GAAG,OAAIA,GAAOA,EAAIC,qBAEhCpB,EAAOqB,KAAI,gBAAGpB,EAAH,EAAGA,SAAUC,EAAb,EAAaA,WAAb,OAA8B,kBAAC,IAAD,CACxCD,SAAUA,EACVC,WAAYA,EACZoB,QAAS,CAAC,0BAA2B,gC,wBCP9BC,EAlCH,WAAO,IAAD,EACQC,oBAAS,GADjB,mBACTC,EADS,KACHC,EADG,KAGhB,OACE,oCACE,kBAACC,EAAA,EAAD,CACEC,IAAKH,EACLI,QAAS,CAAEC,MAAO,EAAGC,KAAM,KAC3BC,eAAa,GAEb,kBAACC,EAAA,EAAD,CACEC,UAAWC,IACXC,SAAS,WACTC,QAAQ,OACRC,WAAW,SACXC,eAAe,SACfC,MAAM,QACNC,OAAO,QACPC,OAAQ,EACRC,MAAO,CAAEC,gBAAiB,SAE1B,kBAACC,EAAA,EAAD,CACEC,KAAK,QACLC,QAAS,kBAAMrB,GAAQ,SAAAsB,GAAI,OAAKA,OAFlC,uGAQJ,kBAAC,EAAD,QCxBcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.03c30cc6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cfuv.691aa0f6.png\";","import React from 'react'\r\nimport { YMaps, Map as YMap, FullscreenControl, ZoomControl, TypeSelector, TrafficControl, Placemark } from 'react-yandex-maps';\r\nimport cfu_logo from './logos/cfuv.png'\r\n\r\nconst PLACES = [{\r\n  geometry: [44.95, 34.1],\r\n  properties: {\r\n    iconContent: 'F',\r\n    iconCaption: 'Симферополь',\r\n    hintContent: 'hint',\r\n    balloonContentHeader: 'header',\r\n    balloonContentBody: 'body',\r\n    balloonContentFooter: 'footer',\r\n  },\r\n}, {\r\n  geometry: [44.936479, 34.134633],\r\n  properties: {\r\n    iconContent: `<img src=${cfu_logo} width=\"18\" alt=\"CFU\"/>`,\r\n    iconCaption: 'КФУ',\r\n    hintContent: 'Крымский федеральный университет имени В. И. Вернадского',\r\n    balloonContentHeader: 'Крымский федеральный университет имени В. И. Вернадского',\r\n    balloonContentBody: `Российский федеральный университет в Симферополе. Создан в 2014 году, /\r\n    включив в себя восемь академий и институтов, пять колледжей и центров, 11 филиалов / \r\n    по всему Крыму и 7 научных организаций. Крупнейшее высшее учебное заведение Республики Крым. /\r\n    В настоящее время находящийся в стадии переформирования из бывших вузов в отдельную организацию федерального значения.`,\r\n    balloonContentFooter: 'Приемная комиссия \\n +7 (3652) 51-65-65',\r\n  },\r\n}];\r\n\r\nconst Map = () => (\r\n  <YMaps>\r\n    <YMap\r\n      defaultState={{\r\n        center: [44.95, 34.1],\r\n        zoom: 14,\r\n      }}\r\n      options={{ fullscreenZIndex: 0, exitFullscreenByEsc: false }}\r\n    >\r\n      <TrafficControl />\r\n      <ZoomControl />\r\n      <TypeSelector />\r\n      <FullscreenControl\r\n        options={{ visible: false }}\r\n        instanceRef={ref => ref && ref.enterFullscreen()}\r\n      />\r\n      {PLACES.map(({ geometry, properties }) => <Placemark\r\n        geometry={geometry}\r\n        properties={properties}\r\n        modules={['geoObject.addon.balloon', 'geoObject.addon.hint']}\r\n      />)}\r\n\r\n    </YMap>\r\n  </YMaps >\r\n)\r\n\r\nexport default Map;\r\n","import React, { useState } from 'react';\nimport Fade from '@material-ui/core/Fade';\nimport Map from './Map'\nimport Button from '@material-ui/core/Button';\nimport Paper from '@material-ui/core/Paper';\nimport Box from '@material-ui/core/Box';\n\nconst App = () => {\n  const [show, setShow] = useState(false);\n\n  return (\n    <>\n      <Fade\n        in={!show}\n        timeout={{ enter: 0, exit: 3000 }}\n        unmountOnExit\n      >\n        <Paper\n          component={Box}\n          position=\"absolute\"\n          display=\"flex\"\n          alignItems=\"center\"\n          justifyContent=\"center\"\n          width=\"100vw\"\n          height=\"100vh\"\n          zIndex={1}\n          style={{ backgroundColor: \"blue\" }}\n        >\n          <Button\n            size=\"large\"\n            onClick={() => setShow(prev => !prev)}\n          >\n            Карта Симферополя\n          </Button>\n        </Paper>\n      </Fade>\n      <Map />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}