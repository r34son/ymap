{"version":3,"sources":["logos/cfuv.png","Map.jsx","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","PLACES","geometry","properties","iconContent","cfu_logo","iconCaption","hintContent","balloonContentHeader","balloonContentBody","balloonContentFooter","Map","query","apikey","defaultState","center","zoom","options","fullscreenZIndex","exitFullscreenByEsc","provider","visible","instanceRef","ref","enterFullscreen","map","modules","App","useState","show","setShow","Fade","in","timeout","enter","exit","unmountOnExit","Paper","component","Box","position","display","alignItems","justifyContent","width","height","zIndex","style","backgroundColor","Button","size","onClick","prev","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0EAAAA,EAAOC,QAAU,IAA0B,kC,2KCerCC,EAAS,CAAC,CACdC,SAAU,CAAC,UAAW,WACtBC,WAAY,CACVC,YAAY,YAAD,O,OAAcC,EAAd,2BACXC,YAAa,qBACbC,YAAa,2SACbC,qBAAsB,2SACtBC,mBAAmB,+1DAInBC,qBAAsB,4HAG1B,CACER,SAAU,CAAC,YAAa,aACxBC,WAAY,CACVG,YAAa,8FACbE,qBAAsB,8FACtBC,mBAAmB,oiEAOvB,CACEP,SAAU,CAAC,YAAa,aACxBC,WAAY,CACVG,YAAa,mDACbE,qBAAsB,uKACtBC,mBAAmB,m5FASvB,CACEP,SAAU,CAAC,YAAa,aACxBC,WAAY,CACVG,YAAa,sEACbE,qBAAsB,6KACtBC,mBAAmB,6/EAsCRE,EA7BH,kBACV,kBAAC,IAAD,CAAOC,MAAO,CAAEC,OAAQ,yCACtB,kBAAC,IAAD,CACEC,aAAc,CACZC,OAAQ,CAAC,MAAO,MAChBC,KAAM,IAERC,QAAS,CAAEC,iBAAkB,EAAGC,qBAAqB,IAErD,kBAAC,IAAD,CAAeF,QAAS,CAAEG,SAAU,mBACpC,kBAAC,IAAD,MACA,kBAAC,IAAD,MACA,kBAAC,IAAD,MACA,kBAAC,IAAD,MACA,kBAAC,IAAD,MACA,kBAAC,IAAD,CACEH,QAAS,CAAEI,SAAS,GACpBC,YAAa,SAAAC,GAAG,OAAIA,GAAOA,EAAIC,qBAEhCvB,EAAOwB,KAAI,gBAAGvB,EAAH,EAAGA,SAAUC,EAAb,EAAaA,WAAb,OAA8B,kBAAC,IAAD,CACxCD,SAAUA,EACVC,WAAYA,EACZuB,QAAS,CAAC,0BAA2B,gC,wBClD9BC,EAlCH,WAAO,IAAD,EACQC,oBAAS,GADjB,mBACTC,EADS,KACHC,EADG,KAGhB,OACE,oCACE,kBAACC,EAAA,EAAD,CACEC,IAAKH,EACLI,QAAS,CAAEC,MAAO,EAAGC,KAAM,KAC3BC,eAAa,GAEb,kBAACC,EAAA,EAAD,CACEC,UAAWC,IACXC,SAAS,WACTC,QAAQ,OACRC,WAAW,SACXC,eAAe,SACfC,MAAM,QACNC,OAAO,QACPC,OAAQ,EACRC,MAAO,CAAEC,gBAAiB,SAE1B,kBAACC,EAAA,EAAD,CACEC,KAAK,QACLC,QAAS,kBAAMrB,GAAQ,SAAAsB,GAAI,OAAKA,OAFlC,uGAQJ,kBAAC,EAAD,QCxBcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.eaf0adce.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cfuv.691aa0f6.png\";","import React from 'react'\r\nimport {\r\n  YMaps,\r\n  Map as YMap,\r\n  FullscreenControl,\r\n  ZoomControl,\r\n  SearchControl,\r\n  RouteButton,\r\n  TypeSelector,\r\n  TrafficControl,\r\n  GeolocationControl,\r\n  Placemark\r\n} from 'react-yandex-maps';\r\nimport cfu_logo from './logos/cfuv.png'\r\n\r\nconst PLACES = [{\r\n  geometry: [44.936479, 34.134633],\r\n  properties: {\r\n    iconContent: `<img src=${cfu_logo} width=\"18\" alt=\"CFU\"/>`,\r\n    iconCaption: 'КФУ',\r\n    hintContent: 'Крымский федеральный университет имени В. И. Вернадского',\r\n    balloonContentHeader: 'Крымский федеральный университет имени В. И. Вернадского',\r\n    balloonContentBody: `Российский федеральный университет в Симферополе. Создан в 2014 году,\r\n    включив в себя восемь академий и институтов, пять колледжей и центров, 11 филиалов\r\n    по всему Крыму и 7 научных организаций. Крупнейшее высшее учебное заведение Республики Крым.\r\n    В настоящее время находящийся в стадии переформирования из бывших вузов в отдельную организацию федерального значения.`,\r\n    balloonContentFooter: 'Приемная комиссия \\n +7 (3652) 51-65-65',\r\n  },\r\n},\r\n{\r\n  geometry: [44.96432132, 34.09785423],\r\n  properties: {\r\n    iconCaption: 'Гагаринский парк',\r\n    balloonContentHeader: 'Гагаринский парк',\r\n    balloonContentBody: `Самый большой городской парк на территории Крыма, открытый в 1960-х гг.\r\n    На протяжении многих десятилетий он был любимым местом для прогулок у жителей Симферополя.\r\n    Здесь в изобилии растут крымские сосны, платаны, буки, акации, каштаны, тополи и ивы.\r\n    В центральной части парка есть два небольших озера, где обитает утиная стая.\r\n    Главная прогулочная улица парка – Аллея Славы приводит к мемориалу «Вечный огонь».`,\r\n  },\r\n},\r\n{\r\n  geometry: [44.94203792, 34.13129601],\r\n  properties: {\r\n    iconCaption: 'Салгирка',\r\n    balloonContentHeader: 'Ботанический сад им. Н. В. Багрова',\r\n    balloonContentBody: `Парк Салги́рка — один из крупнейших парков Симферополя.\r\n    Название происходит от имени реки Салгир, на берегах которой первоначально парк был разбит.\r\n    Площадь парка составляет около 42 га. На территории находятся архитектурные постройки XVIII—XIX веков,\r\n    а также представлены несколько вековых дубов, росших когда-то по всей долине р. Салгир.\r\n    Там же растёт двухсотлетний лондонский платан, посаженный П. С. Палласом.\r\n    Остальная, более молодая, растительность высаживалась при реконструкциях парка\r\n    в различные годы: берёза, клен, сосна крымская, ель обыкновенная, ливанский кедр и др.`,\r\n  },\r\n},\r\n{\r\n  geometry: [44.95607938, 34.10984939],\r\n  properties: {\r\n    iconCaption: 'Детский парк',\r\n    balloonContentHeader: 'Симферо́польский Де́тский парк',\r\n    balloonContentBody: `Симферо́польский Де́тский парк — парк в центре Симферополя,\r\n    изначально проектировавшийся как парк для детей. Парк имеет интересную историю\r\n    и является одним из самых посещаемых парков города благодаря массовым мероприятиям,\r\n    которые проводятся на территории парка. Ограничен центральным проспектом Кирова,\r\n    улицами Киевской и Шмидта. На территории парка расположился городской зоопарк (зооуголок).\r\n    Основной вход в парк расположен на проспекте Кирова, дополнительные — на улице Шмидта.`,\r\n  },\r\n}];\r\n\r\nconst Map = () => (\r\n  <YMaps query={{ apikey: '6baf7596-be36-4cef-9109-852aa6630b53' }}>\r\n    <YMap\r\n      defaultState={{\r\n        center: [44.95, 34.1],\r\n        zoom: 14,\r\n      }}\r\n      options={{ fullscreenZIndex: 0, exitFullscreenByEsc: false }}\r\n    >\r\n      <SearchControl options={{ provider: 'yandex#search' }} />\r\n      <RouteButton />\r\n      <GeolocationControl />\r\n      <TrafficControl />\r\n      <ZoomControl />\r\n      <TypeSelector />\r\n      <FullscreenControl\r\n        options={{ visible: false }}\r\n        instanceRef={ref => ref && ref.enterFullscreen()}\r\n      />\r\n      {PLACES.map(({ geometry, properties }) => <Placemark\r\n        geometry={geometry}\r\n        properties={properties}\r\n        modules={['geoObject.addon.balloon', 'geoObject.addon.hint']}\r\n      />)}\r\n\r\n    </YMap>\r\n  </YMaps >\r\n)\r\n\r\nexport default Map;\r\n","import React, { useState } from 'react';\nimport Fade from '@material-ui/core/Fade';\nimport Map from './Map'\nimport Button from '@material-ui/core/Button';\nimport Paper from '@material-ui/core/Paper';\nimport Box from '@material-ui/core/Box';\n\nconst App = () => {\n  const [show, setShow] = useState(false);\n\n  return (\n    <>\n      <Fade\n        in={!show}\n        timeout={{ enter: 0, exit: 3000 }}\n        unmountOnExit\n      >\n        <Paper\n          component={Box}\n          position=\"absolute\"\n          display=\"flex\"\n          alignItems=\"center\"\n          justifyContent=\"center\"\n          width=\"100vw\"\n          height=\"100vh\"\n          zIndex={1}\n          style={{ backgroundColor: \"blue\" }}\n        >\n          <Button\n            size=\"large\"\n            onClick={() => setShow(prev => !prev)}\n          >\n            Карта Симферополя\n          </Button>\n        </Paper>\n      </Fade>\n      <Map />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}